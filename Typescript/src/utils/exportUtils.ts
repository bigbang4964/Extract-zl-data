import * as FileSystem from "expo-file-system";
import { Platform } from "react-native";
import XLSX from "xlsx";

// üß© ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu (type) cho t·ª´ng lo·∫°i th√¥ng tin
type Contact = {
  key: string;    // ID c·ªßa ng∆∞·ªùi li√™n h·ªá
  name: string;   // T√™n hi·ªÉn th·ªã
  avatar: string; // ·∫¢nh ƒë·∫°i di·ªán (URL)
  raw: string;    // D·ªØ li·ªáu g·ªëc JSON
};

type Message = {
  id: number;       // ID tin nh·∫Øn
  sender: string;   // Ng∆∞·ªùi g·ª≠i
  content: string;  // N·ªôi dung tin nh·∫Øn
  time: string;     // Th·ªùi gian g·ª≠i (chu·ªói)
};

type Group = {
  id: string;         // ID nh√≥m
  name: string;       // T√™n nh√≥m
  memberCount: number;// S·ªë l∆∞·ª£ng th√†nh vi√™n
};

// ==========================================================
// üîπ H√ÄM XU·∫§T D·ªÆ LI·ªÜU DANH B·∫† (CONTACTS)
// ==========================================================

/**
 * Xu·∫•t danh b·∫° ra file CSV (d·∫°ng vƒÉn b·∫£n)
 * @param contacts - danh s√°ch danh b·∫°
 * @param fileUri - ƒë∆∞·ªùng d·∫´n n∆°i l∆∞u file
 */
export async function exportContactsToCSV(contacts: Contact[], fileUri: string) {
  // T·∫°o d√≤ng ti√™u ƒë·ªÅ cho file CSV
  const header = "key,Name,Avatar,Raw\n";

  // T·∫°o t·ª´ng d√≤ng d·ªØ li·ªáu
  const rows = contacts
    .map(c => `${c.key},${c.name},${c.avatar},${c.raw}`)
    .join("\n");

  // Ghi to√†n b·ªô d·ªØ li·ªáu v√†o file (UTF-8)
  const file = new FileSystem.File(fileUri);
  await file.write(header + rows, { encoding: "utf8" });
}

/**
 * Xu·∫•t danh b·∫° ra file Excel (.xlsx)
 */
export async function exportContactsToExcel(contacts: Contact[], fileUri: string) {
  // Chuy·ªÉn danh s√°ch danh b·∫° th√†nh sheet Excel
  const ws = XLSX.utils.json_to_sheet(contacts);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Contacts");

  // Ghi workbook ra base64
  const wbout = XLSX.write(wb, { type: "base64", bookType: "xlsx" });

  // L∆∞u ra file ƒë·ªãnh d·∫°ng base64
  const file = new FileSystem.File(fileUri);
  await file.write(wbout, { encoding: "base64" });
}

// ==========================================================
// üîπ H√ÄM L·∫§Y ƒê∆Ø·ªúNG D·∫™N XU·∫§T FILE T∆Ø∆†NG ·ª®NG M·ªñI N·ªÄN T·∫¢NG
// ==========================================================

/**
 * L·∫•y ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá ƒë·ªÉ l∆∞u file xu·∫•t
 * @param filename - t√™n file mu·ªën l∆∞u
 * @returns ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi h·ª£p l·ªá
 */
export function getExportPath(filename: string): string {
  if (Platform.OS === "android") {
    // Android: l∆∞u v√†o th∆∞ m·ª•c "Download" c·ªßa ng∆∞·ªùi d√πng
    return `/storage/emulated/0/Download/${filename}`;
  } else {
    // iOS: l∆∞u v√†o th∆∞ m·ª•c sandbox ri√™ng c·ªßa app
    return `${FileSystem.Paths.document}${filename}`;
  }
}

// ==========================================================
// üîπ H√ÄM XU·∫§T D·ªÆ LI·ªÜU TIN NH·∫ÆN (MESSAGES)
// ==========================================================

/**
 * Xu·∫•t danh s√°ch tin nh·∫Øn ra CSV
 */
export async function exportMessagesToCSV(messages: Message[], fileUri: string) {
  const header = "ID,Sender,Content,Time\n";

  // Escape k√Ω t·ª± " trong n·ªôi dung tin nh·∫Øn ƒë·ªÉ tr√°nh l·ªói CSV
  const rows = messages
    .map(m => `${m.id},"${m.sender}","${m.content.replace(/"/g, '""')}",${m.time}`)
    .join("\n");

  const file = new FileSystem.File(fileUri);
  await file.write(header + rows, { encoding: "utf8" });
}

/**
 * Xu·∫•t danh s√°ch tin nh·∫Øn ra Excel
 */
export async function exportMessagesToExcel(messages: Message[], fileUri: string) {
  const ws = XLSX.utils.json_to_sheet(messages);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Messages");
  const wbout = XLSX.write(wb, { type: "base64", bookType: "xlsx" });

  const file = new FileSystem.File(fileUri);
  await file.write(wbout, { encoding: "base64" });
}

// ==========================================================
// üîπ H√ÄM XU·∫§T D·ªÆ LI·ªÜU NH√ìM (GROUPS)
// ==========================================================

/**
 * Xu·∫•t danh s√°ch nh√≥m ra CSV
 */
export async function exportGroupsToCSV(groups: Group[], fileUri: string) {
  const header = "ID,Name,MemberCount\n";
  const rows = groups
    .map(g => `${g.id},"${g.name}",${g.memberCount}`)
    .join("\n");

  const file = new FileSystem.File(fileUri);
  await file.write(header + rows, { encoding: "utf8" });
}

/**
 * Xu·∫•t danh s√°ch nh√≥m ra Excel
 */
export async function exportGroupsToExcel(groups: Group[], fileUri: string) {
  const ws = XLSX.utils.json_to_sheet(groups);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Groups");
  const wbout = XLSX.write(wb, { type: "base64", bookType: "xlsx" });

  const file = new FileSystem.File(fileUri);
  await file.write(wbout, { encoding: "base64" });
}