#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
zl_data_extractor_gui.py
-----------------------------------
C√¥ng c·ª• GUI cho ph√©p:
    T·ª± ƒë·ªông ph√°t hi·ªán ho·∫∑c ch·ªçn th∆∞ m·ª•c ZaloData

    ƒê·ªçc th√¥ng tin t√†i kho·∫£n Zalo (UID, t√™n, avatar)

    Li·ªát k√™ v√† m·ªü c√°c file c∆° s·ªü d·ªØ li·ªáu tin nh·∫Øn (Message DB)

    Xem danh s√°ch b·∫£ng trong DB v√† preview d·ªØ li·ªáu chi ti·∫øt

    T√¨m ki·∫øm, l·ªçc d·ªØ li·ªáu theo t·ª´ kh√≥a trong b·∫£ng

    Xu·∫•t d·ªØ li·ªáu ra file CSV ho·∫∑c Excel

    Xem danh b·∫° (info-cache) g·ªìm b·∫°n b√®, nh√≥m, user

    Chuy·ªÉn ƒë·ªïi giao di·ªán s√°ng/t·ªëi (Light/Dark mode)

    ƒê·ªçc DB an to√†n (read-only), h·ªó tr·ª£ thread tr√°nh treo ·ª©ng d·ª•ng
-----------------------------------
Y√™u c·∫ßu:
 pip install ttkbootstrap pandas pillow sqlite3

L∆∞u √Ω:
 - C√¥ng c·ª• ch·ªâ d√πng khi b·∫°n **c√≥ quy·ªÅn h·ª£p ph√°p** (d·ªØ li·ªáu c·ªßa b·∫°n ho·∫∑c gi·∫•y ph√©p ƒë∆∞·ª£c ph√©p truy c·∫≠p).
 - Lu√¥n l√†m vi·ªác tr√™n **b·∫£n copy** c·ªßa file g·ªëc.
"""
import os
import shutil
import sqlite3
from pathlib import Path
import pandas as pd
import threading
import json
import re
import requests
from io import BytesIO
from PIL import Image, ImageTk

import ttkbootstrap as tb
import tkinter as tk
from ttkbootstrap.constants import *
from tkinter import filedialog, messagebox

# Th∆∞ m·ª•c t·∫°m ƒë·ªÉ copy file SQLite (tr√°nh kh√≥a file khi Zalo ƒëang ch·∫°y)
TEMP_DIR = Path("temp_zalo_db")


# -----------------------------
# H√ÄM TI·ªÜN √çCH
# -----------------------------
def prepare_db_copy(db_file: Path) -> Path:
    """
    Copy file DB v√† c√°c file li√™n quan (-wal, -shm) sang th∆∞ m·ª•c t·∫°m ƒë·ªÉ m·ªü ch·∫ø ƒë·ªô read-only
    Tr√°nh t√¨nh tr·∫°ng SQLite b·ªã kh√≥a khi Zalo ƒëang s·ª≠ d·ª•ng.
    """
    TEMP_DIR.mkdir(exist_ok=True)
    dst_db = TEMP_DIR / db_file.name
    shutil.copy2(db_file, dst_db)
    for ext in ["-wal", "-shm"]:
        f = Path(str(db_file) + ext)
        if f.exists():
            shutil.copy2(f, TEMP_DIR / f.name)
    return dst_db


def list_tables(db_file: Path):
    """Li·ªát k√™ danh s√°ch b·∫£ng trong file SQLite DB"""
    db_copy = prepare_db_copy(db_file)
    conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)
    cur = conn.cursor()
    cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [r[0] for r in cur.fetchall()]
    conn.close()
    return tables


def extract_first_id(obj):
    """
    Tr√≠ch xu·∫•t UID ƒë·∫ßu ti√™n (chu·ªói s·ªë >= 10 k√Ω t·ª±) t·ª´ JSON config
    Duy·ªát ƒë·ªá quy trong dict, list, string
    """
    if isinstance(obj, dict):
        for k, v in obj.items():
            if k.isdigit() and len(k) >= 10:
                return k
            res = extract_first_id(v)
            if res:
                return res
    elif isinstance(obj, list):
        for item in obj:
            res = extract_first_id(item)
            if res:
                return res
    elif isinstance(obj, str):
        match = re.search(r"\b\d{10,}\b", obj)
        if match:
            return match.group(0)
        try:
            nested = json.loads(obj)
            return extract_first_id(nested)
        except Exception:
            pass
    return None


# -----------------------------
# ·ª®NG D·ª§NG CH√çNH
# -----------------------------
class ZaloExtractorApp:
    def __init__(self, master: tb.Window):
        # Kh·ªüi t·∫°o c·ª≠a s·ªï ch√≠nh
        self.master = master
        master.title("üìÇ Zalo PC Data Extractor")
        master.geometry("1100x700")

        # Bi·∫øn l∆∞u tr·ªØ
        self.selected_dir = None       # th∆∞ m·ª•c ZaloData
        self.uid = None                # UID t√†i kho·∫£n
        self.avatar_img = None         # ·∫£nh avatar ch√≠nh
        self.avatar_cache = {}         # cache avatar c·ªßa b·∫°n b√®
        self.message_arr = {}          # l∆∞u tr·ªØ danh s√°ch file Message DB ƒë√£ qu√©t

        self.style = tb.Style()

        # --- Notebook (tab) ---
        self.notebook = tb.Notebook(master, bootstyle="primary")
        self.notebook.pack(fill=BOTH, expand=True, padx=5, pady=5)

        # Tab 1: thao t√°c ch√≠nh
        self.main_tab = tb.Frame(self.notebook)
        self.notebook.add(self.main_tab, text="Message DB")

        # Tab 2: danh b·∫° (info-cache)
        self.info_tab = tb.Frame(self.notebook)
        self.notebook.add(self.info_tab, text="Danh b·∫° (Info-cache)")

        # ========== N·ªòI DUNG TAB 1 ==========
        # Nh√≥m button thao t√°c
        top_frame = tb.LabelFrame(self.main_tab, text="Thao t√°c", padding=10, bootstyle="primary")
        top_frame.pack(fill=X, padx=10, pady=10)

        # N√∫t ch·ªçn th∆∞ m·ª•c
        self.btn_select = tb.Button(top_frame, text="üìÅ Ch·ªçn th∆∞ m·ª•c ZaloPC",
                                    bootstyle="info", command=self.choose_dir)
        self.btn_select.pack(side=LEFT, padx=5)

        # N√∫t qu√©t d·ªØ li·ªáu
        self.btn_scan = tb.Button(top_frame, text="üîç Qu√©t d·ªØ li·ªáu",
                                  bootstyle="success", command=self.scan_dir)
        self.btn_scan.pack(side=LEFT, padx=5)

        # N√∫t ƒë·ªïi theme s√°ng/t·ªëi
        tb.Button(top_frame, text="üåû / üåô ƒê·ªïi theme",
                  bootstyle="warning", command=self.toggle_theme).pack(side=RIGHT, padx=10)

        # Khung hi·ªÉn th·ªã UID + info
        uid_frame = tb.LabelFrame(self.main_tab, text="UID / Info", padding=10, bootstyle="secondary")
        uid_frame.pack(fill=X, padx=10, pady=5)

        self.uid_var = tb.StringVar()
        tb.Entry(uid_frame, textvariable=self.uid_var, state="readonly").pack(fill=X, padx=5, pady=2)

        self.zname_var = tb.StringVar()
        tb.Entry(uid_frame, textvariable=self.zname_var, state="readonly").pack(fill=X, padx=5, pady=2)

        self.avatar_label = tb.Label(uid_frame, text="(Avatar s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y)")
        self.avatar_label.pack(pady=5)

        self.startup_label = tb.Label(uid_frame, text=f"L·∫ßn ho·∫°t ƒë·ªông g·∫ßn nh·∫•t: {self.load_last_startup()}", bootstyle="secondary")
        self.startup_label.pack(anchor="w", padx=10, pady=(3, 10))

        self.system_label = tb.Label(uid_frame,
                             text=f"M√°y: {self.get_system_info()}",
                             bootstyle="secondary")
        self.system_label.pack(anchor="w", padx=10, pady=(0, 10))

        # Khung hi·ªÉn th·ªã danh s√°ch file Message DB
        msg_frame = tb.LabelFrame(self.main_tab, text="Message DB Files", padding=10, bootstyle="secondary")
        msg_frame.pack(fill=BOTH, expand=True, padx=10, pady=5)

        self.tree = tb.Treeview(msg_frame, columns=("file",), show="headings", bootstyle="info")
        self.tree.heading("file", text="File")
        self.tree.pack(fill=BOTH, expand=True)

        # Khung n√∫t xu·∫•t danh s√°ch Message DB
        export_frame = tb.Frame(msg_frame)
        export_frame.pack(fill=X, pady=5)

        tb.Button(export_frame, text="üíæ Xu·∫•t danh s√°ch CSV", bootstyle="success",
                command=lambda: self.export_message_list("csv")).pack(side=LEFT, padx=5)
        tb.Button(export_frame, text="üíæ Xu·∫•t danh s√°ch Excel", bootstyle="info",
                command=lambda: self.export_message_list("excel")).pack(side=LEFT, padx=5)


        sb = tb.Scrollbar(msg_frame, orient="vertical", command=self.tree.yview, bootstyle="round")
        self.tree.configure(yscroll=sb.set)
        sb.pack(side=RIGHT, fill=Y)

        # Double-click v√†o file ƒë·ªÉ m·ªü DB
        self.tree.bind("<Double-1>", self.open_message_db)

        # ========== N·ªòI DUNG TAB 2 ==========
        # C·ªôt tr√°i: danh s√°ch info-cache
        left = tb.Frame(self.info_tab)
        left.pack(side=LEFT, fill=Y, padx=5, pady=5)

        self.cache_tree = tb.Treeview(left, columns=("key", "name"), show="headings", bootstyle="info")
        self.cache_tree.heading("key", text="Key")
        self.cache_tree.heading("name", text="T√™n (zName)")
        self.cache_tree.column("key", width=180)
        self.cache_tree.column("name", width=200)
        self.cache_tree.pack(fill=Y, expand=True)

        # --- Thanh t√¨m ki·∫øm theo t√™n ---
        search_frame2 = tb.Frame(left)
        search_frame2.pack(fill=X, padx=5, pady=5)
        tb.Label(search_frame2, text="üîé T√¨m theo t√™n:").pack(side=LEFT)
        self.search_var2 = tb.StringVar()
        search_entry2 = tb.Entry(search_frame2, textvariable=self.search_var2, bootstyle="info")
        search_entry2.pack(side=LEFT, fill=X, expand=True, padx=5)

        # H√†m l·ªçc danh s√°ch khi g√µ
        def filter_cache(*args):
            q = self.search_var2.get().lower()
            self.cache_tree.delete(*self.cache_tree.get_children())
            for key, (zname, avatar, val) in self.avatar_cache.items():
                if q in zname.lower():
                    self.cache_tree.insert("", "end", values=(key, zname, avatar, val))

        # G·∫Øn s·ª± ki·ªán realtime (khi g√µ)
        try:
            self.search_var2.trace_add("write", filter_cache)
        except:
            self.search_var2.trace("w", lambda *a: filter_cache())


        sb2 = tb.Scrollbar(left, orient="vertical", command=self.cache_tree.yview, bootstyle="round")
        self.cache_tree.configure(yscroll=sb2.set)
        sb2.pack(side=RIGHT, fill=Y)

        self.cache_tree.bind("<<TreeviewSelect>>", self.on_select_cache)

                # --- Th√™m khung n√∫t xu·∫•t danh b·∫° ---
        export_frame = tb.Frame(left)
        export_frame.pack(fill=X, pady=5)
        tb.Button(export_frame, text="üíæ Xu·∫•t CSV", bootstyle="success",
                  command=lambda: self.export_info_cache("csv")).pack(side=LEFT, padx=5)
        tb.Button(export_frame, text="üíæ Xu·∫•t Excel", bootstyle="info",
                  command=lambda: self.export_info_cache("excel")).pack(side=LEFT, padx=5)


        # C·ªôt ph·∫£i: chi ti·∫øt info-cache
        right = tb.Frame(self.info_tab)
        right.pack(side=LEFT, fill=BOTH, expand=True, padx=10, pady=5)

        self.avatar_canvas = tk.Canvas(right, width=120, height=120, bg="lightgray")
        self.avatar_canvas.pack(pady=10)
        self.avatar_canvas.create_text(60, 60, text="(Avatar)")

        self.zname_var2 = tb.StringVar()
        self.key_var2 = tb.StringVar()

        tb.Label(right, text="T√™n:").pack(anchor=W)
        tb.Entry(right, textvariable=self.zname_var2, state="readonly").pack(fill=X, padx=5)

        tb.Label(right, text="UID:").pack(anchor=W)
        tb.Entry(right, textvariable=self.key_var2, state="readonly").pack(fill=X, padx=5)

        tb.Label(right, text="JSON raw:").pack(anchor=W)
        self.json_text = tb.Text(right, height=12)
        self.json_text.pack(fill=BOTH, expand=True, padx=5, pady=5)

    # -----------------------------
    # ƒê·ªïi theme s√°ng/t·ªëi
    def toggle_theme(self):
        current = self.style.theme_use()
        new_theme = "darkly" if current not in ("darkly", "cyborg", "superhero") else "litera"
        self.style.theme_use(new_theme)

    # Ch·ªçn th∆∞ m·ª•c ZaloData
    def choose_dir(self):
        d = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ZaloPC")
        if d:
            self.selected_dir = Path(d)
            messagebox.showinfo("Ch·ªçn th∆∞ m·ª•c", f"‚úÖ ƒê√£ ch·ªçn: {d}")

    # Qu√©t th∆∞ m·ª•c ZaloData
    def scan_dir(self):
        if not self.selected_dir:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "‚ö† H√£y ch·ªçn th∆∞ m·ª•c ZaloPC tr∆∞·ªõc.")
            return

        # Reset UI
        self.tree.delete(*self.tree.get_children())
        self.uid_var.set("")
        self.zname_var.set("")
        self.avatar_label.config(image="", text="(Avatar s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y)")
        self.uid = None

        # ƒê·ªçc file database-config.json ƒë·ªÉ t√¨m UID
        cfg_file = self.selected_dir / "database-config.json"
        if cfg_file.exists():
            try:
                data = json.loads(cfg_file.read_text(encoding="utf-8"))
                self.uid = extract_first_id(data)
                if self.uid:
                    self.uid_var.set(self.uid)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c database-config.json: {e}")

        if not self.uid:
            messagebox.showwarning("UID", "‚ùå Kh√¥ng t√¨m th·∫•y UID trong database-config.json")
            return

        # Ki·ªÉm tra Storage.db ƒë·ªÉ l·∫•y info-cache (t√™n, avatar)
        storage_db = self.selected_dir / "Database" / "_production" / "Storage.db"
        if storage_db.exists():
            self.load_info_cache(storage_db, self.uid)
            self.load_all_info_cache(storage_db)

        # T√¨m th∆∞ m·ª•c ch·ª©a message DB
        msg_dir = self.selected_dir / "Database" / "_production" / self.uid / "Core" / "Message"
        if msg_dir.exists():
            self.message_arr.clear()
            for f in msg_dir.glob("*.db"):
                self.tree.insert("", "end", values=(f.name,f))
                self.message_arr[f.name] = (f.name,f)
        else:
            messagebox.showinfo("K·∫øt qu·∫£", "‚ùå Kh√¥ng c√≥ th∆∞ m·ª•c Message DB.")

    # Load info-cache c·ªßa ch√≠nh t√†i kho·∫£n (t√™n, avatar)
    def load_info_cache(self, storage_db: Path, uid: str):
        try:
            db_copy = prepare_db_copy(storage_db)
            conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)
            cur = conn.cursor()
            cur.execute("SELECT val FROM 'info-cache' WHERE key=?", (f"0_{uid}",))
            row = cur.fetchone()
            conn.close()

            if not row:
                return

            data = json.loads(row[0])
            zname = data.get("zName", "")
            avatar_url = data.get("avatar", "")

            self.zname_var.set(zname)

            # N·∫øu c√≥ avatar th√¨ t·∫£i v·ªÅ
            if avatar_url:
                resp = requests.get(avatar_url, timeout=10)
                img = Image.open(BytesIO(resp.content))
                img = img.resize((120, 120))
                self.avatar_img = ImageTk.PhotoImage(img)
                self.avatar_label.config(image=self.avatar_img, text="")
            else:
                self.avatar_label.config(text="(No avatar)")

            last_startup = f"L·∫ßn kho·∫°t ƒë·ªông g·∫ßn nh·∫•t: {self.load_last_startup()}"
            self.startup_label.config(text=last_startup)
            self.system_label.config(text=f"M√°y: {self.get_system_info()}")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Load info-cache th·∫•t b·∫°i: {e}")

    # Load to√†n b·ªô info-cache (danh b·∫° b·∫°n b√®)
    def load_all_info_cache(self, storage_db: Path):
        try:
            db_copy = prepare_db_copy(storage_db)
            conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)
            cur = conn.cursor()
            cur.execute("SELECT key, val FROM 'info-cache'")
            rows = cur.fetchall()
            conn.close()

            self.cache_tree.delete(*self.cache_tree.get_children())
            self.avatar_cache.clear()

            for key, val in rows:
                try:
                    data = json.loads(val)
                    zname = data.get("zName", "")
                    avatar = data.get("avatar", "")
                except:
                    zname, avatar = "", ""
                self.cache_tree.insert("", "end", values=(key, zname, avatar, val))
                self.avatar_cache[key] = (zname, avatar, val)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng load ƒë∆∞·ª£c info-cache: {e}")

    # X·ª≠ l√Ω khi ch·ªçn 1 ng∆∞·ªùi trong info-cache
    def on_select_cache(self, event):
        sel = self.cache_tree.selection()
        if not sel:
            return

        item = self.cache_tree.item(sel[0])
        vals = item.get("values", [])
        if len(vals) < 4:
            return

        uid, zname, avatar, raw = vals

        # c·∫≠p nh·∫≠t entry
        self.key_var2.set(str(uid))
        self.zname_var2.set(zname)

        # c·∫≠p nh·∫≠t JSON preview
        self.json_text.delete("1.0", "end")
        self.json_text.insert("1.0", raw)

        # c·∫≠p nh·∫≠t avatar
        self.avatar_canvas.delete("all")
        if avatar:
            try:
                resp = requests.get(avatar, timeout=10)
                img = Image.open(BytesIO(resp.content)).resize((100, 100))
                self.avatar_img2 = ImageTk.PhotoImage(img)
                self.avatar_canvas.create_image(
                    60, 60, image=self.avatar_img2, anchor="center"
                )
            except Exception as e:
                print("L·ªói load avatar:", e)
                self.avatar_canvas.create_text(60, 60, text="(Avatar l·ªói)")
        else:
            self.avatar_canvas.create_text(60, 60, text="(Kh√¥ng c√≥ avatar)")

    # -----------------------------
    # Preview b·∫£ng SQLite
    # -----------------------------
    # -----------------------------
    # üóÇ H√†m m·ªü DB tin nh·∫Øn ƒë∆∞·ª£c ch·ªçn trong TreeView
    def open_message_db(self, event):
        # L·∫•y item ƒëang ƒë∆∞·ª£c ch·ªçn trong tree
        item = self.tree.focus()
        if not item:
            return

        # L·∫•y ƒë∆∞·ªùng d·∫´n file DB t·ª´ m·∫£ng message_arr (theo index)
        db_file = Path(self.message_arr[self.tree.item(item, "values")[0]][1])

        # G·ªçi h√†m preview ƒë·ªÉ ch·ªçn b·∫£ng trong DB
        self.preview_message_db(db_file)

    # -----------------------------
    def preview_message_db(self, db_file: Path):
        """Hi·ªÉn th·ªã danh s√°ch b·∫£ng c√≥ trong file DB v√† cho ph√©p ch·ªçn ƒë·ªÉ xem n·ªôi dung"""
        try:
            # H√†m list_tables() l·∫•y danh s√°ch b·∫£ng trong DB
            tables = list_tables(db_file)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c DB: {db_file}, {e}")
            return

        # T·∫°o c·ª≠a s·ªï m·ªõi hi·ªÉn th·ªã danh s√°ch b·∫£ng
        win = tb.Toplevel(self.master)
        win.title(f"üìë B·∫£ng trong {db_file.name}")
        win.geometry("400x500")

        tb.Label(win, text=f"Ch·ªçn b·∫£ng trong {db_file.name}", bootstyle="primary").pack(pady=5)

        # Frame ch·ª©a TreeView danh s√°ch b·∫£ng
        frame = tb.Frame(win)
        frame.pack(fill=BOTH, expand=True, padx=10, pady=10)

        # T·∫°o TreeView hi·ªÉn th·ªã danh s√°ch b·∫£ng
        table_list = tb.Treeview(frame, columns=("table",), show="headings", bootstyle="info")
        table_list.heading("table", text="T√™n b·∫£ng")
        for t in tables:
            table_list.insert("", "end", values=(t,))
        table_list.pack(fill=BOTH, expand=True)

        # Th√™m scrollbar cho danh s√°ch b·∫£ng
        sb = tb.Scrollbar(frame, orient="vertical", command=table_list.yview, bootstyle="round")
        table_list.configure(yscroll=sb.set)
        sb.pack(side=RIGHT, fill=Y)

        # H√†m m·ªü b·∫£ng ƒë∆∞·ª£c ch·ªçn
        def open_selected_table(event=None):
            item = table_list.focus()
            if not item:
                return
            # L·∫•y t√™n b·∫£ng ƒë∆∞·ª£c ch·ªçn
            tname = table_list.item(item, "values")[0]
            # ƒê√≥ng c·ª≠a s·ªï ch·ªçn b·∫£ng
            win.destroy()
            # Hi·ªÉn th·ªã n·ªôi dung b·∫£ng
            self.preview_table_by_name(db_file, tname)

        # G√°n s·ª± ki·ªán double click ƒë·ªÉ m·ªü b·∫£ng
        table_list.bind("<Double-1>", open_selected_table)
        # N√∫t xem b·∫£ng
        tb.Button(win, text="Xem b·∫£ng", bootstyle="success", command=open_selected_table).pack(pady=5)

    # -----------------------------
    def preview_table_by_name(self, db_file: Path, table: str):
        """Hi·ªÉn th·ªã preview d·ªØ li·ªáu trong b·∫£ng SQLite"""
        # T·∫°o c·ª≠a s·ªï xem d·ªØ li·ªáu
        preview_win = tb.Toplevel(self.master)
        preview_win.title(f"üëÄ Preview {db_file.name}:{table}")
        preview_win.geometry("1000x700")

        # Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
        label_status = tb.Label(preview_win, text="‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...")
        label_status.pack(pady=10)

        # Thanh ti·∫øn tr√¨nh (loading)
        pb = tb.Progressbar(preview_win, mode="indeterminate", bootstyle="info-striped")
        pb.pack(fill=X, padx=20, pady=5)
        pb.start()

        # Frame ch·ª©a d·ªØ li·ªáu b·∫£ng
        frame_data = tb.Frame(preview_win)
        frame_data.pack(fill=BOTH, expand=True)

        # Thread t·∫£i d·ªØ li·ªáu (tr√°nh treo giao di·ªán)
        def load_data():
            try:
                # Sao ch√©p DB sang b·∫£n t·∫°m (tr√°nh lock)
                db_copy = prepare_db_copy(db_file)

                # M·ªü DB ·ªü ch·∫ø ƒë·ªô ch·ªâ ƒë·ªçc
                conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)

                # ƒê·ªçc to√†n b·ªô b·∫£ng v√†o DataFrame Pandas
                df = pd.read_sql_query(f'SELECT * FROM "{table}"', conn)
                conn.close()

                # H√†m hi·ªÉn th·ªã d·ªØ li·ªáu sau khi t·∫£i xong
                def show_data():
                    label_status.destroy()
                    pb.stop()
                    pb.destroy()

                    # üîç Thanh t√¨m ki·∫øm
                    search_frame = tb.Frame(preview_win)
                    search_frame.pack(fill=X, padx=5, pady=5)
                    tb.Label(search_frame, text="üîé T√¨m ki·∫øm:").pack(side=LEFT)
                    search_var = tb.StringVar()
                    tb.Entry(search_frame, textvariable=search_var, bootstyle="info").pack(side=LEFT, fill=X, expand=True, padx=5)

                    # T·∫°o TreeView hi·ªÉn th·ªã d·ªØ li·ªáu
                    cols = list(df.columns)
                    tree = tb.Treeview(frame_data, columns=cols, show="headings", bootstyle="primary")

                    # C·∫•u h√¨nh c√°c c·ªôt
                    for c in cols:
                        tree.heading(c, text=c)
                        tree.column(c, width=160, anchor="w", stretch=True)
                    tree.pack(fill=BOTH, expand=True)

                    # Th√™m scrollbar
                    sb = tb.Scrollbar(frame_data, orient="vertical", command=tree.yview, bootstyle="round")
                    tree.configure(yscroll=sb.set)
                    sb.pack(side=RIGHT, fill=Y)

                    # H√†m c·∫≠p nh·∫≠t TreeView t·ª´ DataFrame
                    def update_tree(dataframe):
                        tree.delete(*tree.get_children())
                        for _, row in dataframe.iterrows():
                            # Thay gi√° tr·ªã NaN b·∫±ng chu·ªói r·ªóng
                            vals = [("" if pd.isna(x) else x) for x in row.tolist()]
                            tree.insert("", "end", values=vals)

                    # Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
                    update_tree(df)

                    # H√†m t√¨m ki·∫øm (l·ªçc DataFrame theo chu·ªói nh·∫≠p)
                    def do_search(*args):
                        q = search_var.get().lower()
                        if q:
                            # L·ªçc c√°c d√≤ng c√≥ ch·ª©a chu·ªói t√¨m ki·∫øm trong b·∫•t k·ª≥ c·ªôt n√†o
                            filtered = df[df.apply(lambda r: r.astype(str).str.lower().str.contains(q).any(), axis=1)]
                        else:
                            filtered = df
                        update_tree(filtered)

                    # Theo d√µi thay ƒë·ªïi tr√™n √¥ t√¨m ki·∫øm
                    try:
                        search_var.trace_add("write", do_search)
                    except Exception:
                        # Fallback cho c√°c phi√™n b·∫£n Tkinter c≈©
                        search_var.trace("w", lambda *a: do_search())

                    # üì§ Khung n√∫t xu·∫•t file CSV/Excel
                    frame_export = tb.Frame(preview_win)
                    frame_export.pack(pady=5)
                    tb.Button(frame_export, text="üíæ Xu·∫•t CSV", bootstyle="success",
                            command=lambda: self.export_df(df, "csv", db_file.name, table)).pack(side=LEFT, padx=5)
                    tb.Button(frame_export, text="üíæ Xu·∫•t Excel", bootstyle="info",
                            command=lambda: self.export_df(df, "excel", db_file.name, table)).pack(side=LEFT, padx=5)

                # Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n giao di·ªán (UI thread)
                self.master.after(0, show_data)

            except Exception as e:
                # B√°o l·ªói n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c b·∫£ng
                self.master.after(0, lambda: messagebox.showerror("L·ªói", str(e)))
            finally:
                # D·ª´ng progress bar n·∫øu c√≥ l·ªói
                try:
                    self.master.after(0, pb.stop)
                except Exception:
                    pass

        # Ch·∫°y t·∫£i d·ªØ li·ªáu trong lu·ªìng ri√™ng
        threading.Thread(target=load_data, daemon=True).start()

    # -----------------------------
    def export_df(self, df, fmt, fname, table):
        """Xu·∫•t d·ªØ li·ªáu DataFrame ra CSV ho·∫∑c Excel"""
        # H·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u file
        file = filedialog.asksaveasfilename(
            defaultextension=".csv" if fmt == "csv" else ".xlsx",
            filetypes=[("CSV", "*.csv")] if fmt == "csv" else [("Excel", "*.xlsx")],
            initialfile=f"{fname}__{table}"
        )
        if not file:
            return

        try:
            # Ghi file theo ƒë·ªãnh d·∫°ng
            if fmt == "csv":
                df.to_csv(file, index=False, encoding="utf-8-sig")
            else:
                df.to_excel(file, index=False)

            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u {file}")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))

        # -----------------------------
    # üíæ Xu·∫•t danh s√°ch Message DB ra CSV / Excel
    def export_message_list(self, fmt):
        """Xu·∫•t danh s√°ch Message DB ra CSV ho·∫∑c Excel"""
        if not self.message_arr:
            messagebox.showwarning("Kh√¥ng c√≥ d·ªØ li·ªáu", "‚ö† Ch∆∞a qu√©t ho·∫∑c kh√¥ng c√≥ file Message DB n√†o.")
            return

        # Chu·∫©n b·ªã DataFrame
        data = [{"T√™n file": name, "ƒê∆∞·ªùng d·∫´n": str(path)} for name, (_, path) in self.message_arr.items()]
        df = pd.DataFrame(data)

        # H·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u
        file = filedialog.asksaveasfilename(
            defaultextension=".csv" if fmt == "csv" else ".xlsx",
            filetypes=[("CSV", "*.csv")] if fmt == "csv" else [("Excel", "*.xlsx")],
            initialfile="Message_DB_List"
        )
        if not file:
            return

        try:
            if fmt == "csv":
                df.to_csv(file, index=False, encoding="utf-8-sig")
            else:
                df.to_excel(file, index=False)
            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u {file}")
        except Exception as e:
            messagebox.showerror("L·ªói khi xu·∫•t", str(e))

    def export_info_cache(self, fmt="csv"):
        """Xu·∫•t to√†n b·ªô danh b·∫° info-cache ra CSV ho·∫∑c Excel"""
        if not self.avatar_cache:
            messagebox.showwarning("Kh√¥ng c√≥ d·ªØ li·ªáu", "‚ö† Ch∆∞a c√≥ d·ªØ li·ªáu danh b·∫° ƒë·ªÉ xu·∫•t.")
            return

        # Chu·∫©n b·ªã DataFrame
        records = []
        for key, (zname, avatar, raw) in self.avatar_cache.items():
            records.append({
                "Key": key,
                "T√™n (zName)": zname,
                "Avatar URL": avatar,
                "JSON Raw": raw
            })

        df = pd.DataFrame(records)

        # H·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u file
        file = filedialog.asksaveasfilename(
            defaultextension=".csv" if fmt == "csv" else ".xlsx",
            filetypes=[("CSV", "*.csv")] if fmt == "csv" else [("Excel", "*.xlsx")],
            initialfile="Zalo_InfoCache"
        )
        if not file:
            return

        try:
            # Ghi file
            if fmt == "csv":
                df.to_csv(file, index=False, encoding="utf-8-sig")
            else:
                df.to_excel(file, index=False)
            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u {file}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t d·ªØ li·ªáu: {e}")

    def load_last_startup(self):
        """ƒê·ªçc d√≤ng cu·ªëi c√πng t·ª´ startup.log"""
        from pathlib import Path

        # N·∫øu ch∆∞a ch·ªçn th∆∞ m·ª•c, m·∫∑c ƒë·ªãnh d√πng file startup.log ·ªü th∆∞ m·ª•c hi·ªán t·∫°i
        log_path = None
        if getattr(self, "selected_dir", None):
            log_path = Path(self.selected_dir) / "startup.log"
        else:
            log_path = Path("startup.log")

        if not log_path.exists():
            return "Ch∆∞a c√≥ d·ªØ li·ªáu"

        try:
            with open(log_path, "r", encoding="utf-8") as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
            if lines:
                return lines[-1]
        except Exception as e:
            print("L·ªói ƒë·ªçc startup.log:", e)
        return "Ch∆∞a c√≥ d·ªØ li·ªáu"
    
    def get_system_info(self):
        import platform, socket
        return f"{socket.gethostname()} - {platform.system()} {platform.release()}"



# -----------------------------
# MAIN
# -----------------------------
if __name__ == "__main__":
    root = tb.Window(themename="litera")
    app = ZaloExtractorApp(root)

    # Auto detect th∆∞ m·ª•c ZaloData trong Windows
    if os.name == "nt":
        try:
            user = os.getlogin()
        except Exception:
            user = os.environ.get("USERNAME") or ""
        zalo_path = Path(f"C:/Users/{user}/AppData/Roaming/ZaloData")
        if zalo_path.exists():
            app.selected_dir = zalo_path
            root.after(300, app.scan_dir)
        else:
            messagebox.showwarning("Zalo ch∆∞a c√†i ƒë·∫∑t",
                                   "‚ö† Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ZaloData.\nVui l√≤ng c√†i ƒë·∫∑t ho·∫∑c ƒëƒÉng nh·∫≠p Zalo PC.")

    root.mainloop()