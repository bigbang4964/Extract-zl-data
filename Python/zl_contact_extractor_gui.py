import os
import shutil
import sqlite3
from pathlib import Path
import pandas as pd
import threading

# UI hi·ªán ƒë·∫°i d·ª±a tr√™n ttkbootstrap
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import filedialog, messagebox

# Th∆∞ m·ª•c t·∫°m ƒë·ªÉ copy database (tr√°nh b·ªã kh√≥a khi Zalo ƒëang ch·∫°y)
TEMP_DIR = Path("temp_zalo_db")


# -----------------------------
# H√ÄM TI·ªÜN √çCH
# -----------------------------
def prepare_db_copy(db_file: Path) -> Path:
    """
    T·∫°o b·∫£n copy database v√† c√°c file ƒëi k√®m (.db-wal, .db-shm)
    ƒë·ªÉ tr√°nh l·ªói locked khi ƒë·ªçc d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ Zalo.
    """
    TEMP_DIR.mkdir(exist_ok=True)
    dst_db = TEMP_DIR / db_file.name
    shutil.copy2(db_file, dst_db)  # copy file .db ch√≠nh

    # copy th√™m file .db-wal v√† .db-shm n·∫øu c√≥
    wal = Path(str(db_file) + "-wal")
    shm = Path(str(db_file) + "-shm")
    if wal.exists():
        shutil.copy2(wal, TEMP_DIR / wal.name)
    if shm.exists():
        shutil.copy2(shm, TEMP_DIR / shm.name)

    return dst_db


def list_tables(db_file: Path):
    """
    Li·ªát k√™ t·∫•t c·∫£ t√™n b·∫£ng trong m·ªôt file SQLite.
    """
    db_copy = prepare_db_copy(db_file)
    conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)
    cur = conn.cursor()
    cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = [r[0] for r in cur.fetchall()]
    conn.close()
    return tables


# -----------------------------
# L·ªöP ·ª®NG D·ª§NG CH√çNH
# -----------------------------
class ZaloExtractorApp:
    def __init__(self, master: tb.Window):
        self.master = master
        master.title("üìÇ Zalo PC Data Extractor")
        master.geometry("900x600")

        self.selected_dir = None     # th∆∞ m·ª•c Zalo ƒë∆∞·ª£c ch·ªçn
        self.tables_index = []       # l∆∞u danh s√°ch (file, b·∫£ng)

        # style an to√†n
        self.style = tb.Style()

        # --- FRAME CH·ª®C NƒÇNG ---
        top_frame = tb.LabelFrame(master, text="Thao t√°c", padding=10, bootstyle="primary")
        top_frame.pack(fill=X, padx=10, pady=10)

        # N√∫t ch·ªçn th∆∞ m·ª•c Zalo
        self.btn_select = tb.Button(top_frame, text="üìÅ Ch·ªçn th∆∞ m·ª•c ZaloPC", bootstyle="info", command=self.choose_dir)
        self.btn_select.pack(side=LEFT, padx=5)

        # N√∫t qu√©t d·ªØ li·ªáu
        self.btn_scan = tb.Button(top_frame, text="üîç Qu√©t d·ªØ li·ªáu", bootstyle="success", command=self.scan_dir)
        self.btn_scan.pack(side=LEFT, padx=5)

        # --- FRAME DANH S√ÅCH B·∫¢NG ---
        table_frame = tb.LabelFrame(master, text="Danh s√°ch b·∫£ng d·ªØ li·ªáu", padding=10, bootstyle="secondary")
        table_frame.pack(fill=BOTH, expand=True, padx=10, pady=5)

        # Treeview hi·ªÉn th·ªã danh s√°ch file.db v√† b·∫£ng
        self.tree = tb.Treeview(table_frame, columns=("file", "table"), show="headings", bootstyle="info")
        self.tree.heading("file", text="File")
        self.tree.heading("table", text="B·∫£ng")
        self.tree.pack(fill=BOTH, expand=True)

        # Thanh cu·ªôn d·ªçc
        scrollbar = tb.Scrollbar(table_frame, orient="vertical", command=self.tree.yview, bootstyle="round")
        self.tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=RIGHT, fill=Y)

        # Double-click v√†o b·∫£ng ƒë·ªÉ xem preview
        self.tree.bind("<Double-1>", self.preview_table_event)

        # --- FRAME ƒê·ªîI GIAO DI·ªÜN ---
        switch_frame = tb.Frame(master)
        switch_frame.pack(fill=X, pady=5)
        tb.Button(switch_frame, text="üåû / üåô ƒê·ªïi theme", bootstyle="warning", command=self.toggle_theme).pack(side=RIGHT, padx=10)

    # -----------------------------
    # CH·ª®C NƒÇNG UI
    # -----------------------------
    def toggle_theme(self):
        """ƒê·ªïi theme gi·ªØa s√°ng v√† t·ªëi."""
        current = self.style.theme_use()
        new_theme = "darkly" if current not in ("darkly", "cyborg", "superhero") else "litera"
        self.style.theme_use(new_theme)

    def choose_dir(self):
        """M·ªü h·ªôp tho·∫°i ch·ªçn th∆∞ m·ª•c ZaloPC th·ªß c√¥ng."""
        d = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ZaloPC")
        if d:
            self.selected_dir = Path(d)
            messagebox.showinfo("Ch·ªçn th∆∞ m·ª•c", f"‚úÖ ƒê√£ ch·ªçn: {d}")

    def scan_dir(self):
        """
        Qu√©t to√†n b·ªô th∆∞ m·ª•c ZaloData ƒë·ªÉ t√¨m file SQLite (.db).
        Ch·ªâ li·ªát k√™ b·∫£ng 'info-cache' n·∫øu c√≥ v√† auto-preview lu√¥n.
        """
        if not self.selected_dir:
            messagebox.showwarning("Ch∆∞a ch·ªçn th∆∞ m·ª•c", "‚ö† H√£y ch·ªçn th∆∞ m·ª•c ZaloPC tr∆∞·ªõc.")
            return

        # X√≥a d·ªØ li·ªáu c≈© trong treeview
        self.tree.delete(*self.tree.get_children())
        self.tables_index.clear()

        found_item = None

        # Qu√©t t·∫•t c·∫£ file *.db
        for f in self.selected_dir.rglob("*"):
            if f.suffix.lower() in (".db", ".sqlite", ".sqlite3"):
                try:
                    tables = list_tables(f)
                    if "info-cache" in tables:
                        self.tables_index.append((f, "info-cache"))
                        self.tree.insert("", "end", values=(f.name, "info-cache"))
                        found_item = (f, "info-cache")
                        break  # d·ª´ng ngay khi t√¨m th·∫•y
                except Exception as e:
                    print(f"[ERR] {f}: {e}")

        # Auto open preview
        if found_item:
            f, t = found_item
            # g·ªçi method c·ªßa instance
            self.master.after(300, lambda: self.preview_table_by_name(f, t))
        else:
            messagebox.showinfo("K·∫øt qu·∫£", "‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng 'info-cache'.")

    def preview_table_by_name(self, db_file: Path, table: str):
        """
        M·ªü tr·ª±c ti·∫øp preview theo file v√† b·∫£ng.
        ƒê√¢y l√† method (kh√¥ng ph·∫£i function ngo√†i).
        """
        preview_win = tb.Toplevel(self.master)
        preview_win.title(f"üëÄ Preview {db_file.name}:{table}")
        preview_win.geometry("1000x700")

        label_status = tb.Label(preview_win, text="‚è≥ ƒêang t·∫£i d·ªØ li·ªáu, vui l√≤ng ƒë·ª£i...")
        label_status.pack(pady=10)
        pb = tb.Progressbar(preview_win, mode="indeterminate", bootstyle="info-striped")
        pb.pack(fill=X, padx=20, pady=5)
        pb.start()

        frame_data = tb.Frame(preview_win)
        frame_data.pack(fill=BOTH, expand=True)

        def load_data():
            try:
                db_copy = prepare_db_copy(db_file)
                conn = sqlite3.connect(f'file:{db_copy}?mode=ro', uri=True)
                df = pd.read_sql_query(f"SELECT * FROM \"{table}\"", conn)
                conn.close()

                def show_data():
                    label_status.destroy()
                    pb.stop()
                    pb.destroy()

                    # --- Search box ---
                    search_frame = tb.Frame(preview_win)
                    search_frame.pack(fill=X, padx=5, pady=5)
                    tb.Label(search_frame, text="üîé T√¨m ki·∫øm:").pack(side=LEFT)
                    search_var = tb.StringVar()
                    search_entry = tb.Entry(search_frame, textvariable=search_var, bootstyle="info")
                    search_entry.pack(side=LEFT, fill=X, expand=True, padx=5)

                    # --- Treeview ---
                    cols = list(df.columns)
                    tree = tb.Treeview(frame_data, columns=cols, show="headings", bootstyle="primary")
                    for c in cols:
                        tree.heading(c, text=c)
                        tree.column(c, width=160, anchor="w", stretch=True)
                    tree.pack(fill=BOTH, expand=True)

                    sb = tb.Scrollbar(frame_data, orient="vertical", command=tree.yview, bootstyle="round")
                    tree.configure(yscroll=sb.set)
                    sb.pack(side=RIGHT, fill=Y)

                    def update_tree(dataframe):
                        tree.delete(*tree.get_children())
                        for _, row in dataframe.iterrows():
                            # convert nan -> empty string to avoid issues
                            vals = [("" if pd.isna(x) else x) for x in row.tolist()]
                            tree.insert("", "end", values=vals)

                    update_tree(df)

                    def do_search(*args):
                        q = search_var.get().lower()
                        if q:
                            filtered = df[df.apply(lambda r: r.astype(str).str.lower().str.contains(q).any(), axis=1)]
                        else:
                            filtered = df
                        update_tree(filtered)

                    # trace_add hi·ªán t·∫°i ch·ªâ c√≥ tr√™n Python 3.6+; n·∫øu l·ªói b·∫°n c√≥ th·ªÉ d√πng trace("w", ...)
                    try:
                        search_var.trace_add("write", do_search)
                    except Exception:
                        search_var.trace("w", lambda *a: do_search())

                    # Export
                    frame_export = tb.Frame(preview_win)
                    frame_export.pack(pady=5)
                    tb.Button(frame_export, text="üíæ Xu·∫•t CSV", bootstyle="success",
                              command=lambda: self.export_df(df, "csv", db_file.name, table)).pack(side=LEFT, padx=5)
                    tb.Button(frame_export, text="üíæ Xu·∫•t Excel", bootstyle="info",
                              command=lambda: self.export_df(df, "excel", db_file.name, table)).pack(side=LEFT, padx=5)

                # Hi·ªÉn th·ªã d·ªØ li·ªáu trong main thread
                self.master.after(0, show_data)
            except Exception as e:
                self.master.after(0, lambda: messagebox.showerror("L·ªói", str(e)))
            finally:
                # ƒë·∫£m b·∫£o progress d·ª´ng n·∫øu c√≥ l·ªói tr∆∞·ªõc khi show_data
                try:
                    self.master.after(0, pb.stop)
                except Exception:
                    pass

        threading.Thread(target=load_data, daemon=True).start()

    def preview_table_event(self, event):
        """
        Xem tr∆∞·ªõc d·ªØ li·ªáu khi double-click v√†o m·ªôt b·∫£ng trong treeview.
        """
        item = self.tree.focus()
        if not item:
            return
        fname, table = self.tree.item(item, "values")

        # T√¨m l·∫°i ƒë∆∞·ªùng d·∫´n file .db t·ª´ self.tables_index
        db_path = None
        for f, t in self.tables_index:
            if f.name == fname and t == table:
                db_path = f
                break
        if not db_path:
            messagebox.showwarning("L·ªói", "Kh√¥ng t√¨m th·∫•y file t∆∞∆°ng ·ª©ng trong index.")
            return

        self.preview_table_by_name(db_path, table)

    def export_df(self, df, fmt, fname, table):
        """
        Xu·∫•t to√†n b·ªô DataFrame ra CSV ho·∫∑c Excel.
        """
        file = filedialog.asksaveasfilename(
            defaultextension=".csv" if fmt == "csv" else ".xlsx",
            filetypes=[("CSV", "*.csv")] if fmt == "csv" else [("Excel", "*.xlsx")],
            initialfile=f"{fname}__{table}"
        )
        if not file:
            return
        try:
            if fmt == "csv":
                df.to_csv(file, index=False, encoding="utf-8-sig")
            else:
                df.to_excel(file, index=False)
            messagebox.showinfo("Xu·∫•t th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u {file}")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))


# -----------------------------
# MAIN APP
# -----------------------------
if __name__ == "__main__":
    root = tb.Window(themename="litera")  # theme s√°ng m·∫∑c ƒë·ªãnh

    app = ZaloExtractorApp(root)

    # üîπ Auto detect th∆∞ m·ª•c ZaloData n·∫øu ch·∫°y Windows
    if os.name == "nt":
        try:
            user = os.getlogin()
        except Exception:
            # fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c login name
            user = os.environ.get("USERNAME") or os.environ.get("USER") or ""
        zalo_path = Path(f"C:/Users/{user}/AppData/Roaming/ZaloData")
        if zalo_path.exists():
            app.selected_dir = zalo_path
            # g·ªçi scan trong mainloop sau 300ms ƒë·ªÉ GUI kh·ªüi t·∫°o xong
            root.after(300, app.scan_dir)
        else:
            messagebox.showwarning("Zalo ch∆∞a c√†i ƒë·∫∑t", "‚ö† Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ZaloData.\nVui l√≤ng c√†i ƒë·∫∑t ho·∫∑c ƒëƒÉng nh·∫≠p Zalo PC.")

    root.mainloop()
